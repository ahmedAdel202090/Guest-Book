{"version":3,"sources":["redux/Actions.js","redux/reducer.js","redux/actionTypes.js","validator.js","redux/actionsCreator.js","Components/Login.js","Components/Register.js","Components/UserHome.js","Components/NavBar.js","Components/Message.js","Main.js","App.js","redux/ConfigureStore.js","serviceWorker.js","index.js","images/pencil-2.svg"],"names":["Actions","state","this","JSON","parse","stringify","register","bind","setCreated","setUser","login","showAllGuestBooks","user","err","created","valid","error","message","value","auth","username","name","id","Cookies","set","token","path","guestBooks","guestbooks","guestbook","push","isOwner","messages","selectedGuestBook","map","message1","_id","messageId","idx","findIndex","splice","invitedUser","initialState","Reducer","action","actions","type","addGuestBook","getGuestBook","loginUser","logout","setSelectedGuestBook","showMessages","createMessage","reply","deleteMessage","inviteUser","required","length","isName","matched","String","match","doRequest","url","method","body","a","authHeader","formBody","property","encodedKey","encodeURIComponent","encodedValue","join","requestOptions","headers","mode","fetch","response","json","Login","props","handleSubmit","document","style","values","alert","Alert","color","Media","className","onSubmit","FormGroup","Label","for","text","model","placeholder","validators","validator","show","Button","to","Component","withRouter","connect","dispatch","data","password","then","res","catch","actionCreator","Register","setCreatedNull","UserHome","initiated","redirect","getAllGuestBooks","element","Col","md","onClick","Row","cookie","get","NavBar","Navbar","expand","NavbarBrand","href","Nav","navbar","NavLink","Message","writeMessage","comment","guestBookId","notFound","userId","comments","left","top","tag","src","icon","width","height","alt","editAndUpdate","heading","sm","textarea","cols","rows","guestbookId","guestBook","Main","getUser","exact","remove","store","createStore","applyMiddleware","thunk","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.51c4ac9d.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\r\n\r\nexport default class Actions {\r\n    constructor(state){\r\n        this.state = JSON.parse(JSON.stringify(state));\r\n        this.register = this.register.bind(this);\r\n        this.setCreated = this.setCreated.bind(this);\r\n        this.setUser = this.setUser.bind(this);\r\n        this.login = this.login.bind(this);\r\n        this.showAllGuestBooks = this.showAllGuestBooks.bind(this);\r\n    }\r\n    register(user,err){\r\n        if(err){\r\n            this.state.created = {\r\n                valid:false,\r\n                error:err.message\r\n            };\r\n            return this.state;\r\n        }\r\n        this.state.created = {\r\n            valid:true,\r\n            user:user\r\n        };\r\n        return this.state;\r\n    }\r\n    login(value,err){\r\n        if(err){\r\n            this.state.user = {\r\n                auth:false,\r\n                error:err.message\r\n            }\r\n\r\n        }\r\n        else if(value.auth){\r\n            this.state.user = {\r\n                username:value.username,\r\n                name:value.name,\r\n                id:value.id,\r\n                auth:true\r\n            }\r\n            const cookie = new Cookies();\r\n            cookie.set('user-guestbook', value.token, { path: '/' });\r\n        }\r\n        else{\r\n            this.state.user = {\r\n                auth:false,\r\n                error:value.message\r\n            }\r\n        }\r\n        return this.state;\r\n    }\r\n    setUser(user){\r\n        this.state.user = user;\r\n        return this.state;\r\n    }\r\n    setCreated(created){\r\n        this.state.created = created;\r\n        return this.state;\r\n    }\r\n\r\n    showAllGuestBooks(guestBooks, err) {\r\n        if(err){\r\n            return this.state;\r\n        }\r\n        this.state.guestbooks = guestBooks;\r\n        return this.state;\r\n    }\r\n    addGuestBook(guestbook,err){\r\n        if(err){\r\n            return this.state;\r\n        }\r\n\r\n        this.state.guestbooks.push({isOwner:true,...guestbook});\r\n        return this.state;\r\n    }\r\n    getGuestBook(messages,id,name,err){\r\n        if(err){\r\n            return this.state;\r\n        }\r\n        this.state.selectedGuestBook={\r\n            name:name,\r\n            id:id,\r\n            messages:messages\r\n        };\r\n        return this.state;\r\n    }\r\n    loginUser(user,err){\r\n        if(err){\r\n            return this.state;\r\n        }\r\n        this.state.user = user;\r\n        return this.state;\r\n    }\r\n    logout(){\r\n        this.state.user = null;\r\n        return this.state;\r\n    }\r\n    setSelectedGuestBook(guestbook){\r\n        this.state.selectedGuestBook = {guestbook:guestbook,messages:[]};\r\n        return this.state;\r\n    }\r\n    showMessages(messages,err){\r\n        if(err || this.state.selectedGuestBook === null){\r\n            return this.state;\r\n        }\r\n        this.state.selectedGuestBook.messages = messages;\r\n        return this.state;\r\n    }\r\n\r\n    createMessage(message, err) {\r\n        if(err || this.state.selectedGuestBook === null){\r\n            return this.state;\r\n        }\r\n        this.state.selectedGuestBook.messages.push(message);\r\n        return this.state;\r\n    }\r\n    reply(message,err){\r\n        if(err || this.state.selectedGuestBook === null){\r\n            return this.state;\r\n        }\r\n        this.state.selectedGuestBook.messages = this.state.selectedGuestBook.messages.map(message1 => {\r\n            if(message1._id === message._id){\r\n                return message;\r\n            }\r\n            return message1;\r\n        });\r\n        return this.state;\r\n    }\r\n    deleteMessage(messageId,err){\r\n        if(err || this.state.selectedGuestBook === null){\r\n            return this.state;\r\n        }\r\n        const idx = this.state.selectedGuestBook.messages.findIndex(message => message._id === messageId);\r\n        this.state.selectedGuestBook.messages.splice(idx,idx >= 0 ? 1 : 0);\r\n        return this.state;\r\n    }\r\n    inviteUser(value,err){\r\n        if(err || value === null){\r\n            this.state.invitedUser = {\r\n                error:err.message\r\n            }\r\n            return this.state;\r\n        }\r\n        this.state.invitedUser = value;\r\n        return this.state;\r\n    }\r\n}","import * as actionTypes from './actionTypes';\r\nimport Actions from './Actions';\r\n\r\n\r\nexport const initialState = {\r\n    created:null,\r\n    user:null,\r\n    guestbooks:[],\r\n    selectedGuestBook : null,\r\n    invitedUser:null\r\n};\r\n\r\nexport const Reducer = (state = initialState , action) =>{\r\n    let actions = new Actions(state);\r\n    switch (action.type) {\r\n        case actionTypes.REGISTER:\r\n            return actions.register(action.user,action.err);\r\n        case actionTypes.SET_DEFAULT_CREATED:\r\n            return actions.setCreated(null);\r\n        case actionTypes.LOGIN:\r\n            return actions.login(action.value, action.err);\r\n        case actionTypes.SHOW_ALL_GUESTBOOKS:\r\n            return actions.showAllGuestBooks(action.guestbooks,action.err);\r\n        case actionTypes.CREATE_GUESTBOOK:\r\n            return actions.addGuestBook(action.guestbook,action.err);\r\n        case actionTypes.SHOW_GUESTBOOK:\r\n            return actions.getGuestBook(action.messages,action.id,action.name,action.err);\r\n        case actionTypes.GET_USER:\r\n            return  actions.loginUser(action.user,action.err);\r\n        case actionTypes.LOGOUT:\r\n            return actions.logout();\r\n        case actionTypes.SET_GUESTBOOK:\r\n            return actions.setSelectedGuestBook(action.guestbook);\r\n        case actionTypes.SHOW_MESSAGES:\r\n            return  actions.showMessages(action.messages,action.err);\r\n        case actionTypes.CREATE_MESSAGE:\r\n            return actions.createMessage(action.message,action.err);\r\n        case actionTypes.REPLY_MESSAGE:\r\n            return actions.reply(action.message,action.err);\r\n        case actionTypes.DELETE_MESSAGE:\r\n            return actions.deleteMessage(action.messageId,action.err);\r\n        case actionTypes.INVITE_USER:\r\n            return actions.inviteUser(action.value,action.err);\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n};","export const INVITE_USER = 'INVITE_USER';\r\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE';\r\nexport const REPLY_MESSAGE = 'REPLY_MESSAGE';\r\nexport const CREATE_MESSAGE = 'CREATE_MESSAGE';\r\nexport const SHOW_MESSAGES = 'SHOW_MESSAGES';\r\nexport const SET_GUESTBOOK = 'SET_GUESTBOOK';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const GET_USER = 'GET_USER';\r\nexport const SHOW_GUESTBOOK = 'SHOW_GUESTBOOK';\r\nexport const CREATE_GUESTBOOK = 'CREATE_GUESTBOOK';\r\nexport const SHOW_ALL_GUESTBOOKS = 'SHOW_ALL_GUESTBOOKS';\r\nexport const LOGIN = 'LOGIN';\r\nexport const REGISTER = 'REGISTER';\r\nexport const SET_DEFAULT_CREATED = 'SET_DEFAULT_CREATED';","export const required = (value) => value && value.length;\r\n\r\nexport const isName = (value) => {\r\n    if(value == null) return false;\r\n    const regex = /[A-Z][a-z]{2,}(\\s[A-Z][a-z]{2,}|^$)/g;\r\n    const matched = String(value).match(regex);\r\n    return matched!=null && matched.length>0 && matched[0] === String(value);\r\n};","import * as actionTypes from './actionTypes';\r\nimport Cookies from 'universal-cookie';\r\n\r\n\r\nasync function doRequest(url, method, body,authHeader={}) {\r\n    let formBody = [];\r\n    if(method === 'POST' || method === 'PUT'){\r\n        for (let property in body) {\r\n            let encodedKey = encodeURIComponent(property);\r\n            let encodedValue = encodeURIComponent(body[property]);\r\n            formBody.push(encodedKey + \"=\" + encodedValue);\r\n        }\r\n        formBody = formBody.join(\"&\");\r\n    }\r\n    let requestOptions = method ==='POST' || method === 'PUT'? {\r\n        method: method,\r\n        headers: {\"Content-Type\":\"application/x-www-form-urlencoded\",...authHeader},\r\n        body: formBody\r\n    }: {\r\n        method:method,\r\n        headers:authHeader,\r\n        mode:'cors'\r\n    };\r\n    try {\r\n        let response = await fetch(url, requestOptions);\r\n        response = await response.json();\r\n        return response;\r\n    }\r\n    catch(err){\r\n        throw err;\r\n    }\r\n}\r\n\r\n\r\nexport const register = (data) => {\r\n  return (dispatch) => {\r\n      const body = {\r\n          name:data.name,\r\n          username:data.username,\r\n          password:data.password\r\n      }\r\n      doRequest('http://localhost:5000/auth/register','POST',body)\r\n          .then(res => dispatch({type:actionTypes.REGISTER,user:res}))\r\n          .catch(err => dispatch({type:actionTypes.REGISTER,err:err}));\r\n  };\r\n};\r\nexport const login = (data) => {\r\n    return (dispatch) => {\r\n      const body = {\r\n          username:data.username,\r\n          password:data.password\r\n      }\r\n      doRequest('http://localhost:5000/auth/login','POST',body)\r\n          .then(res => dispatch({type:actionTypes.LOGIN,value:res}))\r\n          .catch(err => dispatch({type:actionTypes.LOGIN,err:err}));\r\n    };\r\n}\r\n\r\nexport const setCreatedNull = () => {\r\n    return {type:actionTypes.SET_DEFAULT_CREATED};\r\n}\r\n\r\nexport const getAllGuestBooks = () => {\r\n    return (dispatch) => {\r\n        const cookie = new Cookies();\r\n        doRequest('http://localhost:5000/api/guestbook/show-all','GET',null,{'x-access-token':cookie.get('user-guestbook')})\r\n            .then(res => dispatch({type:actionTypes.SHOW_ALL_GUESTBOOKS,guestbooks:res}))\r\n            .catch(err => dispatch({type:actionTypes.SHOW_ALL_GUESTBOOKS,err:err}));\r\n    }\r\n}\r\n\r\n\r\nexport const addGuestBook = (data) => {\r\n    return (dispatch) => {\r\n        const cookie = new Cookies();\r\n        const body = {\r\n            name:data.name\r\n        }\r\n        doRequest('http://localhost:5000/api/guestbook/create','POST',body,{'x-access-token':cookie.get('user-guestbook')})\r\n            .then(res => dispatch({type:actionTypes.CREATE_GUESTBOOK,guestbook:res}))\r\n            .catch(err => dispatch({type:actionTypes.CREATE_GUESTBOOK,err:err}));\r\n    };\r\n};\r\n\r\nexport const getGuestBook = (id,name) => {\r\n    return (dispatch) => {\r\n        const cookie = new Cookies();\r\n        doRequest(`http://localhost:5000/api/message/guestbook/${id}`,'GET',{'x-access-token':cookie.get('user-guestbook')})\r\n            .then(res => dispatch({type:actionTypes.SHOW_GUESTBOOK,name:name,messages:res,id:id}))\r\n            .catch(err => dispatch({type:actionTypes.SHOW_GUESTBOOK,err:err}));\r\n    };\r\n}\r\n\r\nexport const getUser = () => {\r\n    return (dispatch) => {\r\n        const cookie = new Cookies();\r\n        doRequest('http://localhost:5000/api/get-user','GET',null,{'x-access-token':cookie.get('user-guestbook')})\r\n            .then(res => dispatch({type:actionTypes.GET_USER,user:res.user}))\r\n            .catch(err => dispatch({type:actionTypes.GET_USER,err:err}));\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    const cookie = new Cookies();\r\n    cookie.remove('user-guestbook',{path:'/'});\r\n    return {type:actionTypes.LOGOUT};\r\n};\r\n\r\nexport const setSelectedGuestBook = (guestbook) => {\r\n    return {type:actionTypes.SET_GUESTBOOK,guestbook:guestbook};\r\n}\r\n\r\nexport const showMessages = (id) => {\r\n    return (dispatch) => {\r\n        const cookie = new Cookies();\r\n        doRequest(`http://localhost:5000/api/message/guestbook/${id}`,'GET',null,{'x-access-token':cookie.get('user-guestbook')})\r\n            .then(res => dispatch({type:actionTypes.SHOW_MESSAGES,messages:res}))\r\n            .catch(err => dispatch({type:actionTypes.SHOW_MESSAGES,err:err}));\r\n    };\r\n}\r\n\r\nexport const writeMessage = (text,guestbookId) => {\r\n    return (dispatch) => {\r\n        const cookie = new Cookies();\r\n        const body = {\r\n            text:text,\r\n            guestBook:guestbookId\r\n        }\r\n        doRequest('http://localhost:5000/api/message/create','POST',body,{'x-access-token':cookie.get('user-guestbook')})\r\n            .then(res => dispatch({type:actionTypes.CREATE_MESSAGE,message:res}))\r\n            .catch(err => dispatch({type:actionTypes.CREATE_MESSAGE,err:err}))\r\n    };\r\n}\r\n\r\nexport const reply = (text, messageId) => {\r\n    return (dispatch) => {\r\n        const cookie = new Cookies();\r\n        const body = {\r\n            messageId:messageId,\r\n            text:text\r\n        }\r\n        doRequest('http://localhost:5000/api/message/add-reply','POST',body, {'x-access-token':cookie.get('user-guestbook')})\r\n            .then(res => dispatch({type:actionTypes.REPLY_MESSAGE,message:res}))\r\n            .catch(err => dispatch({type:actionTypes.REPLY_MESSAGE,err:err}))\r\n    } ;\r\n}\r\n\r\nexport const deleteMessage = (messageId) => {\r\n    return (dispatch) => {\r\n        const cookie = new Cookies();\r\n        doRequest(`http://localhost:5000/api/message/${messageId}/delete`,'GET',null,{'x-access-token':cookie.get('user-guestbook')})\r\n            .then(res => dispatch({type:actionTypes.DELETE_MESSAGE,messageId:messageId}))\r\n            .catch(err => dispatch({type:actionTypes.DELETE_MESSAGE,err:err}))\r\n    };\r\n}\r\n\r\nexport const inviteUser = (username,guestBookId) => {\r\n    return (dispatch) => {\r\n        const body = {\r\n            username:username,\r\n            guestBookId:guestBookId\r\n        }\r\n        const cookie = new Cookies();\r\n        doRequest('http://localhost:5000/api/guestbook/invite-user','POST',body,{'x-access-token':cookie.get('user-guestbook')})\r\n            .then(res => dispatch({type:actionTypes.INVITE_USER,value:res}))\r\n            .catch(err => dispatch({type:actionTypes.INVITE_USER,err:err}))\r\n    };\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Control, LocalForm, Errors} from 'react-redux-form';\r\nimport {Button, FormGroup, Label,Media, Alert} from 'reactstrap';\r\nimport * as validator from '../validator';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport * as actionCreator from \"../redux/actionsCreator\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    componentWillMount() {\r\n        document.body.style = 'background-color: #09c';\r\n    }\r\n    handleSubmit(values) {\r\n        this.props.login(values);\r\n    }\r\n    render() {\r\n        let alert = <></>;\r\n        if (this.props.user && !this.props.user.auth) {\r\n            alert = <Alert color=\"danger\">{this.props.user.error}</Alert>;\r\n        }\r\n        return (\r\n            <>\r\n                <Media className=\"m-auto col-3 media-form\">\r\n                    <Media body >\r\n                        <h3 className='title'>Login</h3>\r\n                        {alert}\r\n                        <LocalForm className='m-auto p-sm-5' onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <FormGroup>\r\n                                <Label for=\"username\">User Name :</Label>\r\n                                <Control.text\r\n                                    model=\".username\"\r\n                                    className=\"form-control\"\r\n                                    name=\"username\"\r\n                                    id=\"username\"\r\n                                    placeholder=\"User Name\"\r\n                                    validators={\r\n                                        {required: validator.required}\r\n                                    }\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".username\"\r\n                                    show=\"touched\"\r\n                                    messages={{required: 'username is required .'}}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"password\">Password :</Label>\r\n                                <Control\r\n                                    type=\"password\"\r\n                                    model=\".password\"\r\n                                    className=\"form-control\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    validators={{required: validator.required}}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".password\"\r\n                                    show=\"touched\"\r\n                                    messages={{required: 'password is required .'}}\r\n                                />\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" className=\"btn btn-primary\">Submit</Button>\r\n                            <span> if you don't have an account , <Link to='/register'>SignUp</Link> </span>\r\n                        </LocalForm>\r\n                    </Media>\r\n                </Media>\r\n            </>);\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return { user: state.user };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (data) => dispatch(actionCreator.login(data))\r\n    };\r\n};\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));","import React, {Component} from 'react';\r\nimport {Control, LocalForm, Errors} from 'react-redux-form';\r\nimport {Button, FormGroup, Label,Media, Alert} from 'reactstrap';\r\nimport * as validator from '../validator';\r\nimport  {Link} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreator from '../redux/actionsCreator';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    componentWillMount(){\r\n        document.body.style = 'background-color: #09c';\r\n        this.props.setCreatedNull();\r\n    }\r\n    handleSubmit(values) {\r\n        this.props.register(values);\r\n    }\r\n    render() {\r\n        let alert = <></>;\r\n        if (this.props.created && this.props.created.valid) {\r\n            alert = <Alert color=\"success\">thank You {this.props.created.user.name}, Registered Sucessfuly</Alert>;\r\n        }\r\n        else if (this.props.created && !this.props.created.valid) {\r\n            alert = <Alert color=\"danger\">Sorry there is some Wrong in Submision \"{this.props.created.error}\"</Alert>;\r\n        }\r\n        return (\r\n            <>\r\n                <Media className=\"m-auto col-3 media-form\">\r\n                    <Media body >\r\n                        <h3 className='title'>Register</h3>\r\n                        {alert}\r\n                        <LocalForm className='m-auto p-sm-5' onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <FormGroup>\r\n                                <Label for=\"name\">Name :</Label>\r\n                                <Control.text\r\n                                    model=\".name\"\r\n                                    className=\"form-control\"\r\n                                    name=\"name\"\r\n                                    id=\"name\"\r\n                                    placeholder=\"Enter Your Name\"\r\n                                    validators={\r\n                                        {required: validator.required,isName:validator.isName}\r\n                                    }\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".name\"\r\n                                    show=\"touched\"\r\n                                    messages={{required: 'Name is required .',isName: 'name should be started with Capital letter like A not a and at least length 3'}}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"username\">User Name :</Label>\r\n                                <Control.text\r\n                                    model=\".username\"\r\n                                    className=\"form-control\"\r\n                                    name=\"username\"\r\n                                    id=\"username\"\r\n                                    placeholder=\"User Name\"\r\n                                    validators={\r\n                                        {required: validator.required}\r\n                                    }\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".username\"\r\n                                    show=\"touched\"\r\n                                    messages={{required: 'username is required .'}}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"password\">Password :</Label>\r\n                                <Control\r\n                                    type=\"password\"\r\n                                    model=\".password\"\r\n                                    className=\"form-control\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    validators={{required: validator.required}}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".password\"\r\n                                    show=\"touched\"\r\n                                    messages={{required: 'password is required .'}}\r\n                                />\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" className=\"btn btn-primary\">Submit</Button>\r\n                            <span> if you have an account , <Link to='/'>Sign In</Link> </span>\r\n                        </LocalForm>\r\n                    </Media>\r\n                </Media>\r\n            </>);\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return { created: state.created }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        register: (data) => dispatch(actionCreator.register(data)),\r\n        setCreatedNull: () => dispatch(actionCreator.setCreatedNull())\r\n    };\r\n};\r\nexport default  withRouter(connect(mapStateToProps, mapDispatchToProps)(Register));","import React, {Component} from 'react';\r\nimport * as actionCreator from \"../redux/actionsCreator\";\r\nimport {withRouter, Link,Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Col, FormGroup, Label, Row} from \"reactstrap\";\r\nimport {Control, Errors, LocalForm} from \"react-redux-form\";\r\nimport * as validator from \"../validator\";\r\n\r\n\r\nclass UserHome extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initiated = false;\r\n        this.redirect = false;\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.body.style = 'background-color:white';\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.props.addGuestBook(values);\r\n    }\r\n    showMessages(guestbook){\r\n        this.props.setSelectedGuestBook(guestbook);\r\n        this.redirect = true;\r\n    }\r\n    render() {\r\n        if (!this.initiated) {\r\n            this.initiated = true;\r\n            this.props.getAllGuestBooks();\r\n        }\r\n        else if(this.redirect){\r\n            this.redirect =false;\r\n            return <Redirect to='/messages' />\r\n        }\r\n        const guestbooks = this.props.guestbooks.map(element => {\r\n            return (\r\n                <>\r\n                    <Col md={2} onClick = {() => this.showMessages(element)} className='guestbook'>\r\n                        <h2>{element.name}</h2>\r\n                        <p>{element.isOwner?'Owner':'Guest'}</p>\r\n                    </Col>\r\n                </>\r\n            );\r\n        });\r\n        return (\r\n            <>\r\n                <LocalForm className='m-auto p-sm-5' onSubmit={(values) => this.handleSubmit(values)}>\r\n                    <FormGroup>\r\n                        <Label for=\"name\">Guest Book :</Label>\r\n                        <Control.text\r\n                            model=\".name\"\r\n                            className=\"form-control\"\r\n                            name=\"name\"\r\n                            id=\"name\"\r\n                            placeholder=\"Guest Book\"\r\n                            validators={\r\n                                {required: validator.required}\r\n                            }\r\n                        />\r\n                        <Errors\r\n                            className=\"text-danger\"\r\n                            model=\".name\"\r\n                            show=\"touched\"\r\n                            messages={{required: 'please write guest book name.'}}\r\n                        />\r\n                    </FormGroup>\r\n                    <Button type=\"submit\" className=\"btn btn-primary\">Create</Button>\r\n                </LocalForm>\r\n                <Row>\r\n                    {guestbooks}\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        guestbooks: state.guestbooks\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addGuestBook: (data) => dispatch(actionCreator.addGuestBook(data)),\r\n        getGuestBook: (id) => dispatch(actionCreator.getGuestBook(id)),\r\n        getAllGuestBooks: () => dispatch(actionCreator.getAllGuestBooks()),\r\n        setSelectedGuestBook: (guestbook) => dispatch(actionCreator.setSelectedGuestBook(guestbook))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(UserHome));","import React, { Component } from 'react';\r\nimport { Navbar, NavbarBrand, NavbarToggler, Nav, NavItem,NavLink } from 'reactstrap';\r\n\r\nclass NavBar extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar expand=\"md\" className='navbar-block'>\r\n                    <NavbarBrand href=\"/\" className='col-8'>GuestBook</NavbarBrand>\r\n                    <Nav navbar className='col-4'>\r\n                        <p className='m-auto'>hello,{this.props.user.name}</p>\r\n                        <NavLink onClick={() => this.props.logout()} className='btn btn-danger m-auto'>Logout</NavLink>\r\n                    </Nav>\r\n                </Navbar>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, {Component} from 'react';\r\nimport * as actionCreator from \"../redux/actionsCreator\";\r\nimport {withRouter, Link, Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Control, Errors, LocalForm} from \"react-redux-form\";\r\nimport * as validator from \"../validator\";\r\nimport {Button, FormGroup, Label, Media, Alert, Row, Col} from 'reactstrap';\r\nimport icon from '../images/pencil-2.svg';\r\n\r\n\r\nclass Message extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initiated = false;\r\n    }\r\n    writeMessage(values){\r\n        this.props.writeMessage(values.message,this.props.selectedGuestBook.guestbook._id);\r\n    }\r\n    reply(values,messageId){\r\n        this.props.reply(values.comment,messageId);\r\n    }\r\n    inviteUser(data,guestBookId){\r\n        this.props.inviteUser(data.username,guestBookId);\r\n    }\r\n    render() {\r\n        if (!this.initiated && this.props.selectedGuestBook != null) {\r\n            this.initiated = true;\r\n            this.props.showMessages(this.props.selectedGuestBook.guestbook._id);\r\n            return (<></>);\r\n        }\r\n        else if(this.props.selectedGuestBook === null){\r\n            return <Redirect to='/' />;\r\n        }\r\n\r\n        let alert = <></>;\r\n        if (this.props.invitedUser && this.props.invitedUser.notFound) {\r\n            alert = <Alert color=\"danger\">{this.props.invitedUser.message}</Alert>;\r\n        }\r\n        else if(this.props.invitedUser && !this.props.invitedUser.notFound ){\r\n            alert = <Alert color=\"success\">successfully invited</Alert>\r\n        }\r\n        const isOwner = this.props.selectedGuestBook.guestbook.isOwner;\r\n        const userId = this.props.user.id;\r\n        const messages = this.props.selectedGuestBook.messages.map(message => {\r\n            const comments = message.comments.map(comment => {\r\n                return (\r\n                    <>\r\n                        <Row className='message-comment'>\r\n                            <Media className=\"ml-5\">\r\n                                <Media>\r\n                                    <Media left top>\r\n                                        <Media tag=\"img\" src={icon} width={20} height={20}\r\n                                               alt=\"Generic placeholder image\"/>\r\n                                    </Media>\r\n                                    <Media body className=\"ml-3\">\r\n                                        <h6>{comment.user.name}</h6>\r\n                                        <span className=\"ml-3\">{comment.text}</span>\r\n                                    </Media>\r\n                                </Media>\r\n                            </Media>\r\n                        </Row>\r\n                    </>\r\n                );\r\n            });\r\n            let editAndUpdate = <></>\r\n            if(message.user._id === userId){\r\n                editAndUpdate = (\r\n                    <>\r\n                        <span className=\"ml-3\"> <Button color=\"primary\">Edit</Button> </span>\r\n                        <span className=\"ml-3\"> <Button color=\"danger\" onClick={() => this.props.deleteMessage(message._id)}>Delete</Button> </span>\r\n                    </>\r\n                );\r\n            }\r\n            else if(isOwner){\r\n                editAndUpdate = (\r\n                    <>\r\n                        <span className=\"ml-3\" onClick={() => this.props.deleteMessage(message._id)}> <Button color=\"danger\">Delete</Button> </span>\r\n                    </>\r\n                );\r\n            }\r\n            return (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <Row className='message'>\r\n                                <Media className=\"ml-3\">\r\n                                    <Media>\r\n                                        <Media left top>\r\n                                            <Media tag=\"img\" src={icon} width={50} height={50}\r\n                                                   alt=\"Generic placeholder image\"/>\r\n                                        </Media>\r\n                                        <Media body className=\"ml-3\">\r\n                                            <Media heading>{message.user.name}\r\n                                                {editAndUpdate}\r\n                                            </Media>\r\n                                            <div className=\"ml-3 mt-2\">{message.text}</div>\r\n                                        </Media>\r\n                                    </Media>\r\n                                </Media>\r\n                            </Row>\r\n                            {comments}\r\n\r\n                            <Row className='message-reply'>\r\n                                <LocalForm className='p-sm-3' onSubmit={(values) => this.reply(values,message._id)}>\r\n                                    <FormGroup className='row'>\r\n                                        <Control.text\r\n                                            model=\".comment\"\r\n                                            className=\"form-control reply col-6\"\r\n                                            name=\"comment\"\r\n                                            id=\"comment\"\r\n                                            placeholder=\"Reply\"\r\n                                            validators={\r\n                                                {required: validator.required}\r\n                                            }\r\n                                        />\r\n                                        <div className='col-4'><Button type=\"submit\"\r\n                                                                       className=\"btn btn-primary\">send</Button></div>\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".comment\"\r\n                                            show=\"touched\"\r\n                                            messages={{required: 'please add reply.'}}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </LocalForm>\r\n                            </Row>\r\n\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </>\r\n            );\r\n        });\r\n        return (\r\n            <>\r\n                <Row className='ml-2'>\r\n                    <Col sm={4}>\r\n                        <LocalForm className='p-sm-3' onSubmit={(values) => this.inviteUser(values,this.props.selectedGuestBook.guestbook._id)}>\r\n                            <FormGroup>\r\n                                {alert}\r\n                                <Label for=\"username\">Invite User</Label>\r\n                                <Control.text\r\n                                    model=\".username\"\r\n                                    className=\"form-control\"\r\n                                    name=\"username\"\r\n                                    id=\"username\"\r\n                                    placeholder=\"enter username\"\r\n                                    validators={\r\n                                        {required: validator.required}\r\n                                    }\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".username\"\r\n                                    show=\"touched\"\r\n                                    messages={{required: 'please write username.'}}\r\n                                />\r\n                            </FormGroup>\r\n                            <span><Button type=\"submit\" className=\"btn btn-primary\">invite</Button></span>\r\n                        </LocalForm>\r\n                    </Col>\r\n                    <Col sm={7}>\r\n                        <LocalForm className='p-sm-3' onSubmit={(values) => this.writeMessage(values)}>\r\n                            <FormGroup>\r\n                                <Label for=\"message\">Write Message</Label>\r\n                                <Control.textarea\r\n                                    cols={40}\r\n                                    rows={8}\r\n                                    model=\".message\"\r\n                                    className=\"form-control\"\r\n                                    name=\"message\"\r\n                                    id=\"message\"\r\n                                    placeholder=\"write your message\"\r\n                                    validators={\r\n                                        {required: validator.required}\r\n                                    }\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".message\"\r\n                                    show=\"touched\"\r\n                                    messages={{required: 'please write Message.'}}\r\n                                />\r\n                            </FormGroup>\r\n                            <span><Button type=\"submit\" className=\"btn btn-primary\">send</Button></span>\r\n                        </LocalForm>\r\n                    </Col>\r\n                </Row>\r\n                {messages}\r\n\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        selectedGuestBook: state.selectedGuestBook,\r\n        invitedUser:state.invitedUser\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        showMessages: (id) => dispatch(actionCreator.showMessages(id)),\r\n        writeMessage: (text,guestbookId) => dispatch(actionCreator.writeMessage(text,guestbookId)),\r\n        reply: (text,messageId) => dispatch(actionCreator.reply(text,messageId)),\r\n        deleteMessage: (messageId) => dispatch(actionCreator.deleteMessage(messageId)),\r\n        inviteUser: (username,guestBookId) => dispatch(actionCreator.inviteUser(username,guestBookId))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Message));","import React, {Component} from 'react';\r\nimport {Route, withRouter} from 'react-router-dom';\r\nimport {Switch} from 'react-router-dom';\r\nimport Login from './Components/Login';\r\nimport Register from \"./Components/Register\";\r\nimport Cookies from 'universal-cookie';\r\nimport {connect} from \"react-redux\";\r\nimport UserHome from \"./Components/UserHome\";\r\nimport NavBar from \"./Components/NavBar\";\r\nimport * as actionCreator from \"./redux/actionsCreator\";\r\nimport Message from \"./Components/Message\";\r\n\r\nconst cookie = new Cookies();\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        if (cookie.get('user-guestbook')) {\r\n            if(this.props.user === null){\r\n                this.props.getUser();\r\n                return (<></>);\r\n            }\r\n            return (\r\n                <>\r\n                    <NavBar logout = {this.props.logout} user={this.props.user}/>\r\n                    <Switch>\r\n                        <Route path='/' exact>\r\n                            <UserHome/>\r\n                        </Route>\r\n                        <Route path='/messages' exact>\r\n                            <Message/>\r\n                        </Route>\r\n                        <Route path='/*'>\r\n                            <h3>Error:Not Expected Path</h3>\r\n                        </Route>\r\n                    </Switch>\r\n                </>\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                <Switch>\r\n                    <Route path='/' exact>\r\n                        <Login/>\r\n                    </Route>\r\n                    <Route path='/register' exact>\r\n                        <Register/>\r\n                    </Route>\r\n                    <Route path='/*'>\r\n                        <h3>Error:Not Expected Path</h3>\r\n                    </Route>\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return { user: state.user };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getUser: () => dispatch(actionCreator.getUser()),\r\n        logout: () => dispatch(actionCreator.logout())\r\n    };\r\n};\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Main));","import React from 'react';\nimport './App.scss';\nimport { Provider } from \"react-redux\";\nimport { ConfigureStore } from './redux/ConfigureStore';\nimport Main from \"./Main\";\nimport { BrowserRouter} from \"react-router-dom\";\nconst store = ConfigureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n          <Main/>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;","import {createStore, applyMiddleware} from 'redux'\r\nimport {Reducer} from './reducer'\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(Reducer,applyMiddleware(thunk));\r\n    return store;\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pencil-2.b650c3be.svg\";"],"sourceRoot":""}